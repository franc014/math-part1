---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Trigonometry | Deep">
  <main class="container">
    <canvas class="canvas"></canvas>
    <canvas class="chart"></canvas>
  </main>
</Layout>

<style>
  .container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }
  .canvas {
    background-color: hsla(190, 80%, 10%);
  }
  .chart {
    background-color: hsla(230, 30%, 20%);
  }
</style>

<script>
  const canvas = document.querySelector('.canvas');
  const chart = document.querySelector('.chart');
  const ctx = canvas.getContext('2d');
  const ctxChart = chart.getContext('2d');

  const sinColor = 'hsl(40, 90%, 60%)';
  const cosColor = 'hsl(280, 40%, 60%)';
  const tanColor = 'hsl(3, 50%, 60%)';

  canvas.width = window.innerWidth / 2;
	canvas.height  = window.innerHeight;

  chart.width = canvas.width-20;
  chart.height = canvas.height;

  let theta = Math.PI / 4;
  const h = 100;




  let A = {
    x: 	0,
    y:  0
  };

  let B = {
    x: 	h*Math.cos(theta),
    y: 	h*Math.sin(theta)
  };

  let C = {
    x: 	B.x,
    y: 	0
  };

  //offset coordinates
  const offset = {
    x: canvas.width / 2,
    y: canvas.height / 2
  };
 
  //set canvas in the middle
  ctx.translate(offset.x, offset.y);
  ctxChart.translate(offset.x, offset.y);

  update();
  updatePlot();
  canvas.addEventListener('mousemove', (e) => {
   B.x = e.x - offset.x;
   B.y = e.y - offset.y;
   C.x = B.x; 


   update();
   updatePlot();
  })

  drawCoordinateSystem(ctx);
  drawCoordinateSystem(ctxChart);

  function drawCoordinateSystem(context) {  
    context.beginPath();
    context.moveTo(-offset.x, 0);
    context.lineTo(canvas.width - offset.x, 0);
    context.moveTo(0, -offset.y);
    context.lineTo(0,canvas.height - offset.y);
    //line dash
    context.setLineDash([12, 2]);
    context.strokeStyle = 'hsl(190, 10%, 50%)';
    context.stroke();
    context.setLineDash([]);
    context.closePath();
   
  }

  function drawPoint(x, y, r=10 , color) {
    
    ctxChart.beginPath();
    
    ctxChart.fillStyle = color;
    ctxChart.arc(x, y, r/2, 0, 2 * Math.PI);
    ctxChart.fill();
    ctxChart.closePath();
    
    
  }

  function drawText({x, y}, label, color='black', fontSize='30px') {
    ctx.fillStyle = color;
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';
		ctx.font = `bold ${fontSize} Inter`;
		ctx.fillText(label, x,y);
    /* ctx.strokeStyle = 'white';
    ctx.lineWidth = 1;
    ctx.strokeText(label, x,y); */
    ctx.closePath();
  }

  function update() {
    

    const sin = Math.sin(theta);
    const cos = Math.cos(theta);
    const tan = Math.tan(theta);

   
    const thetaDeg = Math.asin(sin) * 180 / Math.PI;



    ctx.clearRect(-offset.x,-offset.y,
      canvas.width,canvas.height);
    drawCoordinateSystem(ctx);
   
    drawLine(A,B,'white');
    drawText(average(A,B),'c','white');
    drawLine(A,C, cosColor);
    drawText(average(A,C),'b',cosColor);
    drawLine(C,B, sinColor);
    drawText(average(B,C),'a',sinColor);

    drawText(A, 'Θ','white','18px');

   

    //draw trig functions text values
    drawText({x: -offset.x + 200, y: offset.y-280}, `Sin(Θ): ${sin.toFixed(2)}`, sinColor,'18px');
    drawText({x: -offset.x + 200, y: offset.y-240}, `Cos(Θ): ${cos.toFixed(2)}`, cosColor,'18px');
    drawText({x: -offset.x + 200, y: offset.y-200}, `Tan(Θ): ${tan.toFixed(2)}`, tanColor,'18px');

    drawText({x: offset.x-300 , y: offset.y-200}, `(Θ): ${theta.toFixed(2)} rad | ${thetaDeg.toFixed(2)} deg `, 'white','18px');



    /* drawPoint(A.x, A.y,30, 'hsl(219, 70%, 80%)');
    drawText(A, 'A');

    drawPoint(B.x, B.y,30, 'lightblue');
    drawText(B, 'B');

    drawPoint(C.x, C.y,30, 'lightgreen');
    drawText(C, 'C'); */
  }

  function updatePlot(){
  
    const c = distance(A,B);
    const b = distance(A,C);
    const a = distance(B,C);

    const sin = a / c;
    const cos = b / c;
    const tan = a / b;

    const theta = Math.asin(sin);

    const chartScalar = 150;
    drawPoint(theta * chartScalar,sin * chartScalar,5,sinColor);
    drawPoint(theta * chartScalar,cos * chartScalar,5,cosColor); 
    drawPoint(theta * chartScalar,tan * chartScalar,5,tanColor);  
  }

  function distance(p1, p2) {
    const dx = p1.x - p2.x;
    const dy = p1.y - p2.y;
    return Math.hypot(dx, dy);
  }

  function average(p1, p2) {
    return {
      x: (p1.x + p2.x) / 2,
      y: (p1.y + p2.y) / 2
    }
  }

  function drawLine(p1, p2, color) {
    ctx.beginPath();
    ctx.strokeStyle = color;
    ctx.moveTo(p1.x, p1.y);
    ctx.lineTo(p2.x, p2.y);
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.closePath();
  }

 
</script>

