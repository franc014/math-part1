---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Vectors">
    <canvas class="canvas"></canvas>
</Layout>

<style>
  .canvas {
    background-color: hsla(190, 80%, 10%);
  }
</style>

<script>
  const canvas = document.querySelector('.canvas');
  const ctx = canvas.getContext('2d');
  canvas.width = window.innerWidth;
	canvas.height  = window.innerHeight;

  let A = {
    x: 	90,
    y:  120
  };

  const offset = {
    x: canvas.width / 2,
    y: canvas.height / 2
  };

  ctx.translate(offset.x, offset.y);

  updateCoords();
  canvas.addEventListener('mousemove', (e) => {
   A.x = e.x - offset.x;
   A.y = e.y - offset.y;

   updateCoords();
  })


 

  drawCoordinateSystem();
  drawPoint(A.x, A.y,10, 'purple');

  function drawCoordinateSystem() {  
    ctx.beginPath();
    ctx.moveTo(-offset.x, 0);
    ctx.lineTo(canvas.width - offset.x, 0);
    ctx.moveTo(0, -offset.y);
    ctx.lineTo(0,canvas.height - offset.y);
    //line dash
    ctx.setLineDash([12, 2]);
    ctx.strokeStyle = 'hsl(190, 10%, 50%)';
    ctx.stroke();
    ctx.setLineDash([]);
    ctx.closePath();
   
  }

  function drawPoint(x, y, r=10 , color) {
    
    ctx.beginPath();
    
    ctx.fillStyle = color;
    ctx.arc(x, y, r/2, 0, 2 * Math.PI);
    ctx.fill();
    ctx.closePath();
  }

  function updateCoords() {
    ctx.clearRect(-offset.x,-offset.y,
      canvas.width,canvas.height);
    drawCoordinateSystem();
    //drawPoint(A.x, A.y, 20,'purple');
    const polar = toPolar(A);

    console.log(polar);

    const cartesian = toCartesian(polar);
    console.log({cartesian});
    //drawPoint(cartesian.x, cartesian.y, 8,'lightblue');
   
    drawArrow(A);
    
  }

  function sum(A,B){
    return {
      x: A.x + B.x,
      y: A.y + B.y
    }
  }

  function drawArrow(tip) {
    const {direction} = toPolar(tip);
    const v1 = {
      direction: direction + Math.PI * 0.8,
      magnitude: 15
    };
    const v2 = {
      direction: direction - Math.PI * 0.8,
      magnitude: 15
    };


    const R = toCartesian(v1);
    const S = toCartesian(v2);
    const t1 = sum(tip, R);
    const t2 = sum(tip, S);

    
    ctx.beginPath();
    ctx.moveTo(0,0);
    ctx.lineTo(tip.x,tip.y);   
    ctx.strokeStyle = 'hsl(90, 80%, 40%)';
    ctx.stroke();
   
    ctx.closePath();

    ctx.beginPath();
    ctx.moveTo(tip.x,tip.y);
    ctx.lineTo(t1.x,t1.y);
    ctx.lineTo(t2.x,t2.y);
    
    ctx.fillStyle = 'hsl(90, 80%, 40%)';
    ctx.fill();
    ctx.closePath();
    
  }
  
  function toCartesian({magnitude,direction}) {
    return {
      x: magnitude * Math.cos(direction),
      y: magnitude * Math.sin(direction)
    }
  }

  function toPolar({x,y}) {

    return {
      magnitude: magnitude({x,y}),
      direction: direction({x,y})
    }
  };

  function magnitude({x,y}) {
    return Math.hypot(x, y);
  }

  function direction({x,y}) {
    return Math.atan2( y, x );
    //return Math.atan( y / x );
  }
  
  
</script>

